% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/semipadd_gt.R
\name{grouplasso_gt_cv}
\alias{grouplasso_gt_cv}
\title{Choose tuning parameters for group lasso estimator with group testing data}
\usage{
grouplasso_gt_cv(
  Y,
  Z,
  Se,
  Sp,
  X,
  groups,
  n.lambda,
  lambda.min.ratio,
  n.folds,
  w,
  E.approx = FALSE,
  tol = 0.001,
  max.iter = 1000,
  report.prog = TRUE
)
}
\arguments{
\item{Y}{Group testing output in the format as output by one of the functions \code{individual.assay.gen}, \code{dorfman.assay.gen}, or \code{array.assay.gen}.}

\item{Z}{Group testing output in the format as output by one of the functions \code{individual.assay.gen}, \code{dorfman.assay.gen}, or \code{array.assay.gen}.}

\item{Se}{A vector of testing sensitivities, where the first element is the
testing specificity for pools and the second entry is the
test specificity for individual testing, if applicable.}

\item{Sp}{A vector of testing specificities, where the first element is the
testing specificity for pools and the second entry is the
test specificity for individual testing, if applicable.}

\item{X}{matrix containing the design matrices}

\item{groups}{a vector indicating to which group each covariate belongs}

\item{n.lambda}{the number of lambda values}

\item{n.folds}{the number of crossvalidation folds}

\item{w}{group-specific weights for different penalization toward similarity for different groups}

\item{E.approx}{a logical indicating whether the conditional expectations in the E-step should be computed approximately or exactly.}

\item{tol}{a convergence criterion}

\item{max.iter}{the maximum allowed number of iterations (EM steps)}

\item{report.prog}{a logical. If \code{TRUE} then the number of inner loops required to complete the M step of the EM algorithm are returned after each EM step.}
}
\value{
Returns the estimator of the parametric model with group testing data
}
\description{
Choose tuning parameters for group lasso estimator with group testing data
}
\examples{
grouplasso_gt_data <- get_grouplasso_gt_data(n = 1000)

grouplasso_gt_cv.out <- grouplasso_gt_cv(Y = grouplasso_gt_data$Y,
                                         Z = grouplasso_gt_data$Z,
                                         Se = grouplasso_gt_data$Se,
                                         Sp = grouplasso_gt_data$Sp,
                                         X = grouplasso_gt_data$X,
                                         groups = grouplasso_gt_data$groups,
                                         n.lambda = 10,
                                         lambda.min.ratio = 0.01,
                                         n.folds = 5,
                                         w  = grouplasso_gt_data$w,
                                         E.approx = FALSE,
                                         tol = 1e-3,
                                         max.iter = 500,
                                         report.prog = TRUE)
}
